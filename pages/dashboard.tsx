import Head from 'next/head'
import { IncomingMessage } from 'http';
import Home from '.';

import { FormEventHandler, MouseEventHandler } from 'react';

import { ACTIVITYSTREAMS_CONTEXT } from '../lib/globals';
import * as AP from '../lib/types/activity_pub';
import { Graph } from '../lib/graph';
import { APAnyThing, APActivity, APOrderedCollection, APActor } from '../lib/classes/activity_pub';
import { APThing } from '../lib/classes/activity_pub/thing';

const PUBLIC_ACTOR = `${ACTIVITYSTREAMS_CONTEXT}#Public`;

type Data = {
  actor: AP.Actor|null;
}

export const getServerSideProps = async ({req}: {req: IncomingMessage & { cookies: { __session?: string; } }}) => {
  const graph = await Graph.connect();
  const actor = await graph.getActorByToken(req.cookies.__session ?? '');

  return {
    props: {
      actor: actor ? await graph.expandThing(actor) : null,
    }
  }
}

function Dashboard({
  actor,
}: Data) {

  if (!actor) {
    return <Home />;
  }

  const getBox = (box: string|AP.OrderedCollection) => {
    return (
      box &&
      typeof box !== 'string' &&
      'id' in box &&
      typeof box?.id === 'string' &&
      box.orderedItems &&
      typeof box.orderedItems !== 'string' &&
      'orderedItems' in box &&
      Array.isArray(box.orderedItems)
    ) ? box.orderedItems : null;
  };

  const getBoxItemHtml = (thing: string|AP.AnyThing) => {          
    if (typeof thing !== 'string' && 'actor' in thing) {
      const activityTypeHtml = <>
        <a href={thing.id ?? '#'}>
          {thing.type}
        </a>
      </>;

      let activityActorHtml = <></>;
      const activityActor = thing.actor;

      if (typeof activityActor !== 'string' && 'inbox' in activityActor) {
        activityActorHtml = <>
          <a href={activityActor.id ?? '#'}>
            @{activityActor.preferredUsername ?? activityActor.id}
          </a>
        </>
      } else if (typeof activityActor === 'string') {
        activityActorHtml = <>
          <a href={activityActor}>
            {activityActor}
          </a>
        </>
      }

      let activityObjectHtml = <></>;
      const activityObject = 'object' in thing ? thing.object : null;

      if (activityObject && typeof activityObject !== 'string' && 'name' in activityObject) {
        activityObjectHtml = <>
          <a href={activityObject.id ?? '#'}>
            {activityObject.name ?? activityObject.id}
          </a>
        </>
      } else if (typeof activityObject === 'string') {
        activityObjectHtml = <>
          <a href={activityObject}>
            {activityObject}
          </a>
        </>
      }

      return <li key={thing.id}>
        {activityActorHtml}
        {' '}
        {activityTypeHtml}
        {' '}
        {activityObjectHtml}
      </li>
    }
    return null;
  }

  const getBoxLinkHtml = (collection: string|AP.OrderedCollection, slotText: string) => {
    return typeof collection === 'string' ? (
      <li>
        <a href={collection}>
          {slotText}
        </a>
      </li>
    ) : typeof collection.url === 'string' ? (
      <li>
        <a href={collection.url}>
          {slotText}
        </a>
      </li>
    ) : null
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <style>{`
          label {
            display: block;
          }
        `}</style>
      </Head>

      <main>
        <h1>Welcome, @{actor.preferredUsername}</h1>
        <nav>
          <ul>
            {typeof actor.url === 'string' ? (
              <li>
                <a href={actor.url}>
                  You
                </a>
              </li>
            ) : null}
            {getBoxLinkHtml(actor.inbox, 'Your Inbox')}
            {getBoxLinkHtml(actor.outbox, 'Your Outbox')}
          </ul>
        </nav>
        <h2>Inbox</h2>
        <ul>
          {getBox(actor.inbox)?.map(getBoxItemHtml) ?? null}
        </ul>
        <h2>Outbox</h2>
        <ul>
          {getBox(actor.outbox)?.map(getBoxItemHtml) ?? null}
        </ul>
      </main>
    </div>
  )
}

export default Dashboard;
